import mongoose, { Schema, model, Types } from 'mongoose';

/**
 * Attributes for defining a player in the Numinia platform.
 */
export interface PlayerAttributes {
  /**
   * The unique identifier for the player (generated by MongoDB).
   */
  _id?: Types.ObjectId;

  /**
   * The player's name used in the game.
   */
  playerName: string;

  /**
   * The player's unique identifier in Oncyber.
   */
  oncyberId?: string;

  /**
   * The player's unique identifier in Hyperfy.
   */
  hyperfyId?: string;

  /**
   * Indicates whether the player is currently active.
   */
  isActive: boolean;

  /**
   * Indicates whether the player is blocked from accessing the platform.
   */
  isBlocked: boolean;

  /**
   * The last time the player was connected to the platform.
   */
  lastConnectionDate: Date;

  /**
   * The timestamp when the player was created (automatically generated by Mongoose).
   */
  createdAt?: Date;

  /**
   * The timestamp of the last update to the player's record (automatically generated by Mongoose).
   */
  updatedAt?: Date;
}

const schema = new Schema<PlayerAttributes>(
  {
    playerName: { type: String, required: true, trim: true },
    oncyberId: { type: String, unique: true, sparse: true },
    hyperfyId: { type: String, unique: true, sparse: true },
    isActive: { type: Boolean, default: true },
    isBlocked: { type: Boolean, default: false },
    lastConnectionDate: { type: Date, default: Date.now },
  },
  { versionKey: false, timestamps: true },
);

schema.index({ oncyberId: 1 }, { unique: true, sparse: true });
schema.index({ hyperfyId: 1 }, { unique: true, sparse: true });

export const PlayerModel = mongoose.models.Player || model<PlayerAttributes>('Player', schema);

export type PlayerDocument = ReturnType<(typeof PlayerModel)['hydrate']>;
